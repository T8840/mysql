(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{429:function(t,a,_){"use strict";_.r(a);var v=_(2),r=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"事务定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务定义"}},[t._v("#")]),t._v(" 事务定义")]),t._v(" "),a("p",[t._v("事务是一组具有原子性的SQL语句，或是一个独立的工作单元。\n它可以使一组数据操作（也叫DML操作，是英文DataManipulation Language的缩写，包括SELECT、INSERT、UPDATE和DELETE），要么全部执行，要么全部不执行，不会因为某种异常情况（比如硬件故障、停电、网络中断等）出现只执行一部分操作的情况。"),a("br"),t._v("\n事务的语法结构:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" 或者 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),t._v(" （开始事务）\n一组DML语句\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),t._v("（提交事务）\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),t._v("（事务回滚）\n")])])]),a("ul",[a("li",[t._v("START TRANSACTION和BEGIN：表示开始事务，意思是通知MySQL，后面的DML操作都是当前事务的一部分。")]),t._v(" "),a("li",[t._v("COMMIT：表示提交事务，意思是执行当前事务的全部操作，让数据更改永久有效。")]),t._v(" "),a("li",[t._v("ROLLBACK：表示回滚当前事务的操作，取消对数据的更改。")])]),t._v(" "),a("h3",{attrs:{id:"事务四个特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务四个特性"}},[t._v("#")]),t._v(" 事务四个特性")]),t._v(" "),a("ul",[a("li",[t._v("原子性"),a("br"),t._v("\n定义：一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败，对于一个事务来说，不可能只执行其中的一部分操作")]),t._v(" "),a("li",[t._v("一致性"),a("br"),t._v("\n定义：一致性是指事务将数据库从一种一致性状态转换到另外一种一致性状态，在事务开始之前和事务介绍后数据库中数据的完整性没有被破坏")]),t._v(" "),a("li",[t._v("隔离性\n"),a("ul",[a("li",[t._v("定义：隔离性要求一个事务对数据库中数据的修改，在未提交完成前对于其他事务是不可见的")]),t._v(" "),a("li",[t._v("SQL标准中定义的四种隔离级别(隔离性由低到高，并发性由高到低）：\n"),a("ul",[a("li",[t._v("未提交读（READ UNCOMMITED）可以读取事务中还未提交的被更改的数据。")]),t._v(" "),a("li",[t._v("已提交读（READ COMMITED）只能读取事务中已经提交的被更改的数据")]),t._v(" "),a("li",[t._v("可重复读（REPEATABLE READ）表示一个事务中，对一个数据读取的值，永远跟第一次读取的值一致，不受其他事务中数据操作的影响。这也是MySQL的默认选项。")]),t._v(" "),a("li",[t._v("可串行化（SERIALIZABLE）表示任何一个事务，一旦对某一个数据进行了任何操作，那么，一直到这个事务结束，MySQL都会把这个数据锁住，禁止其他事务对这个数据进行任何操作。")])])])])]),t._v(" "),a("li",[t._v("持久性"),a("br"),t._v("\n定义：一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，已经提交的修改数据也不会丢失。"),a("br"),t._v("\n事务是数据库系统区别于其他一切文件系统的重要特性之一。")])]),t._v(" "),a("h2",{attrs:{id:"如何确保操作的原子性和数据的一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何确保操作的原子性和数据的一致性"}},[t._v("#")]),t._v(" 如何确保操作的原子性和数据的一致性")]),t._v(" "),a("ul",[a("li",[t._v("事务并不会自动帮你处理SQL语句执行中的错误，如果你对事务中的某一步数据操作发生的错误不做处理，继续提交的话，仍然会导致数据不一致。")]),t._v(" "),a("li",[t._v("避免这种由于事务中的某一步或者几步操作出现错误，而导致数据不完整的情况发生呢？这就要用到事务中错误处理和回滚了\n"),a("ul",[a("li",[t._v("如果发现事务中的某个操作发生错误，要及时使用回滚")]),t._v(" "),a("li",[t._v("只有事务中的所有操作都可以正常执行，才进行提交")]),t._v(" "),a("li",[t._v("这里的关键就是判断操作是不是发生了错误。可以通过MySQL的函数ROW_COUNT()的返回，来判断一个DML操作是否失败，-1表示操作失败，否则就表示影响的记录数。"),a("br"),t._v("\n总之，我们要把重要的关联操作放在事务中，确保操作的原子性，并且对失败的操作进行回滚处理。只有这样，才能真正发挥事务的作用，保证关联操作全部成功或全部失败，最终确保数据的一致性。")])])])]),t._v(" "),a("h2",{attrs:{id:"如何用好事务的隔离性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何用好事务的隔离性"}},[t._v("#")]),t._v(" 如何用好事务的隔离性？")]),t._v(" "),a("p",[t._v("通过对锁的使用，可以实现事务之间的相互隔离。锁的使用方式不同，隔离的程度也不同。"),a("br"),t._v("\n一般来讲，使用MySQL默认的隔离等级REPEATABLE READ，就已经够了。不过，也不排除需要对一些关键的数据操作，使用最高的隔离等级SERIALIZABLE。\n事务的隔离性对并发操作非常有用。当许多用户同时操作数据库的时候，隔离性可以确保各个连接之间互相不影响。这里我要提醒你的是，正确设置事务的隔离等级很重要。一方面，对于一些核心的数据更改操作，你可能需要较高的隔离等级，比如涉及金额的修改；另一方面，你要考虑资源的消耗，不能使系统整体的效率受到太大的影响。"),a("br"),t._v("\n所以，要根据具体的应用场景，正确地使用事务。")]),t._v(" "),a("h2",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),a("ol",[a("li",[t._v("视频")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/dailylesson/detail/100044006?tid=143",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何合理使用MySQL的事务"),a("OutboundLink")],1)]),t._v(" "),a("li")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("网站")])])])}),[],!1,null,null,null);a.default=r.exports}}]);